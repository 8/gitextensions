<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="msg:delete selected" xml:space="preserve">
    <value>Are you sure you want to delete all selected files?</value>
  </data>
  <data name="eToolStripMenuItem.Text" xml:space="preserve">
    <value>Edit ignored files</value>
  </data>
  <data name="msg:no files staged" xml:space="preserve">
    <value>There are no files staged for this commit. Are you sure you want to commit?</value>
  </data>
  <data name="CloseDialogAfterCommitToolTip" xml:space="preserve">
    <value>When checked the commit dialog is closed after each commit.
Otherwise the dialog will only close when there are no modified files left.</value>
  </data>
  <data name="openWithToolStripMenuItem.Text" xml:space="preserve">
    <value>Open With</value>
  </data>
  <data name="resetAlltrackedChangesToolStripMenuItem.Text" xml:space="preserve">
    <value>Reset all (tracked) changes</value>
  </data>
  <data name="deleteFileToolStripMenuItem.Text" xml:space="preserve">
    <value>Delete file</value>
  </data>
  <data name="There are no staged changes" xml:space="preserve">
    <value>There are no staged changes</value>
  </data>
  <data name="Reset.Text" xml:space="preserve">
    <value>Reset changes</value>
  </data>
  <data name="Enter commit message" xml:space="preserve">
    <value>Enter commit message</value>
  </data>
  <data name="There are no unstaged changes" xml:space="preserve">
    <value>There are no unstaged changes</value>
  </data>
  <data name="SolveMergeconflicts.Text" xml:space="preserve">
    <value>There are unresolved mergeconflicts
</value>
  </data>
  <data name="Commit.Text" xml:space="preserve">
    <value>&amp;Commit</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="addFileTogitignoreToolStripMenuItem.Text" xml:space="preserve">
    <value>Add file to .gitignore</value>
  </data>
  <data name="showIgnoredFilesToolStripMenuItem.Text" xml:space="preserve">
    <value>Show ignored files</value>
  </data>
  <data name="msg:delete" xml:space="preserve">
    <value>Are you sure you want delete the selected file(s)?</value>
  </data>
  <data name="msg:delete:failed" xml:space="preserve">
    <value>Delete file failed</value>
  </data>
  <data name="AddFiles.Text" xml:space="preserve">
    <value>Stage</value>
  </data>
  <data name="msg:delete selected:failed" xml:space="preserve">
    <value>Delete failed:</value>
  </data>
  <data name="ResetChanges.Text" xml:space="preserve">
    <value>Reset file changes</value>
  </data>
  <data name="Scan.Text" xml:space="preserve">
    <value>&amp;Rescan changes</value>
  </data>
  <data name="unstageAllToolStripMenuItem.Text" xml:space="preserve">
    <value>Unstage all</value>
  </data>
  <data name="msg:(un)stage chunk" xml:space="preserve">
    <value>You can only use this option when selecting a single file</value>
  </data>
  <data name="rescanChangesToolStripMenuItem.Text" xml:space="preserve">
    <value>Rescan changes</value>
  </data>
  <data name="stageChunkOfFileToolStripMenuItem.Text" xml:space="preserve">
    <value>Stage chunk of file</value>
  </data>
  <data name="msg:delete untracked" xml:space="preserve">
    <value>Are you sure you want to delete all untracked?</value>
  </data>
  <data name="workingToolStripMenuItem.Text" xml:space="preserve">
    <value>Working dir changes</value>
  </data>
  <data name="msg:delete new files" xml:space="preserve">
    <value>Do you also want to delete the new files that are in the selection?

Choose 'No' to keep all new files.</value>
  </data>
  <data name="Amend.Text" xml:space="preserve">
    <value>&amp;Amend last commit</value>
  </data>
  <data name="msg:reset selected" xml:space="preserve">
    <value>Are you sure you want to reset all selected files?</value>
  </data>
  <data name="msg:merge conflicts" xml:space="preserve">
    <value>There are unresolved mergeconflicts, solve mergeconflicts before committing</value>
  </data>
  <data name="deleteSelectedFilesToolStripMenuItem.Text" xml:space="preserve">
    <value>Delete selected files</value>
  </data>
  <data name="openToolStripMenuItem.Text" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="resetPartOfFileToolStripMenuItem.Text" xml:space="preserve">
    <value>Reset chunk of file</value>
  </data>
  <data name="menuStrip1.Text" xml:space="preserve">
    <value>menuStrip1</value>
  </data>
  <data name="msg:amend commit" xml:space="preserve">
    <value>You are about to rewrite history.
Only use amend if the commit is not published yet!

Do you want to continue?</value>
  </data>
  <data name="filesListedToCommitToolStripMenuItem.Text" xml:space="preserve">
    <value>Staged files</value>
  </data>
  <data name="UnstageFiles.Text" xml:space="preserve">
    <value>Unstage</value>
  </data>
  <data name="msg:please enter commit message" xml:space="preserve">
    <value>Please enter commit message</value>
  </data>
  <data name="commitMessageToolStripMenuItem.Text" xml:space="preserve">
    <value>Commit &amp;message</value>
  </data>
  <data name="filenameToClipboardToolStripMenuItem.Text" xml:space="preserve">
    <value>Filename to clipboard</value>
  </data>
  <data name="menuStrip2.Text" xml:space="preserve">
    <value>menuStrip2</value>
  </data>
  <data name="Ok.Text" xml:space="preserve">
    <value>Commit</value>
  </data>
  <data name="CloseDialogAfterCommit.Text" xml:space="preserve">
    <value>Close dialog after commit</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Commit</value>
  </data>
  <data name="deleteAllUntrackedFilesToolStripMenuItem.Text" xml:space="preserve">
    <value>Delete all untracked files</value>
  </data>
  <data name="openWithDifftoolToolStripMenuItem.Text" xml:space="preserve">
    <value>Open With Difftool</value>
  </data>
  <data name="resetSelectedFilesToolStripMenuItem.Text" xml:space="preserve">
    <value>Reset selected files</value>
  </data>
  <data name="showUntrackedFilesToolStripMenuItem.Text" xml:space="preserve">
    <value>Show untracked files</value>
  </data>
  <data name="menuStrip3.Text" xml:space="preserve">
    <value>menuStrip3</value>
  </data>
  <data name="msg:not on a branch" xml:space="preserve">
    <value>You are not working on a branch.
This commit will be unreferenced when switching to another brach and can be lost.

Do you want to continue?</value>
  </data>
  <data name="msg:reset" xml:space="preserve">
    <value>Are you sure you want to reset the changes of the selected files?</value>
  </data>
  <data name="stageAllToolStripMenuItem.Text" xml:space="preserve">
    <value>Stage all</value>
  </data>
</root>